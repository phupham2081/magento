<?php
/**
 * Created by PhpStorm.
 * User: phupham
 * Date: 28/03/2019
 * Time: 10:41
 */

namespace TMG\ProductAtb\Block;


use Magento\Catalog\Model\ProductRepository;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory;
use Magento\Directory\Model\Currency;
use Magento\Framework\Registry;
use Magento\Framework\UrlInterface;
use Magento\Framework\View\Element\Template;
use Magento\Sales\Model\Order;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Customer\Model\ResourceModel\Group\Collection;

class CheckSSL extends Template
{
    protected $_template = "hello.phtml";
    protected $_storeManager;
    protected $_urlInterface;
    protected $_categoryCollectionFactory;
    protected $_productRepository;
    protected $_registry;
    protected $_currency;
    protected $_customerGroup;
    protected $_orderModel;

    public function __construct(
        Collection $customerGroup,
        Template\Context $context,
        StoreManagerInterface $storeManager,
        Currency $currency,
        UrlInterface $url,
        CollectionFactory $collectionFactory,
        ProductRepository $productRepository,
        Registry $registry,
        Order $orderModel,
        array $data = [])
    {
        $this->_orderModel = $orderModel;
        $this->_customerGroup = $customerGroup;
        $this->_currency = $currency;
        $this->_categoryCollectionFactory = $collectionFactory;
        $this->_productRepository = $productRepository;
        $this->_registry = $registry;
        $this->_urlInterface = $url;
        $this->_storeManager = $storeManager;
        parent::__construct($context, $data);
    }

    protected function _prepareLayout()
    {
        return parent::_prepareLayout(); // TODO: Change the autogenerated stub
    }

    public function getOrderItems($orderId)
    {
        $order = $this->_orderModel->load($orderId);
        return $order->getAllVisibleItems();
    }

    /**
     * Prining URLs using StoreManagerInterface
     */
    public function getStoreManagerData()
    {
        echo $this->_storeManager->getStore()->getId() . '<br />';

        // by default: URL_TYPE_LINK is returned
        echo $this->_storeManager->getStore()->getBaseUrl() . '<br />';

        echo $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB) . '<br />';
        echo $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_DIRECT_LINK) . '<br />';
        echo $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA) . '<br />';
        echo $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_STATIC) . '<br />';

        echo $this->_storeManager->getStore()->getUrl('product/33') . '<br />';

        echo $this->_storeManager->getStore()->getCurrentUrl(false) . '<br />';

        echo $this->_storeManager->getStore()->getBaseMediaDir() . '<br />';

        echo $this->_storeManager->getStore()->getBaseStaticDir() . '<br />';
    }

    /**
     * Prining URLs using URLInterface
     */
    public function getUrlInterfaceData()
    {
        echo $this->_urlInterface->getCurrentUrl() . '<br />';

        echo $this->_urlInterface->getUrl() . '<br />';

        echo $this->_urlInterface->getUrl('helloworld/general/enabled') . '<br />';

        echo $this->_urlInterface->getBaseUrl() . '<br />';
    }

    public function getCategoryCollection($isActive = true, $level = false, $sortBy = false, $pageSize = false)
    {
        $collection = $this->_categoryCollectionFactory->create();
        $collection->addAttributeToSelect('*');

        // select only active categories
        if ($isActive) {
            $collection->addIsActiveFilter();
        }

        // select categories of certain level
        if ($level) {
            $collection->addLevelFilter($level);
        }

        // sort categories by some value
        if ($sortBy) {
            $collection->addOrderField($sortBy);
        }

        // select certain number of categories
        if ($pageSize) {
            $collection->setPageSize($pageSize);
        }

        return $collection;
    }

    public function getProductById($id)
    {
        return $this->_productRepository->getById($id);
    }

    public function getCurrentProduct()
    {
        return $this->_registry->registry('current_product');
    }

//    public function getBaseCurrencyCode()
//    {
//        return $this->_storeManager->getStore()->getCurrentCurrencyCode();
//    }
//
//    public function getDefaultCurrencyCode()
//    {
//        return $this->_storeManager->getStore()->getDefaultCurrencyCode();
//    }
//
//    public function getAvailableCurrencyCodes($skipBaseNotAllowed = false)
//    {
//        return $this->_storeManager->getStore()->getAvailableCurrencyCodes($skipBaseNotAllowed);
//    }
//
//    public function getAllowedCurrencies()
//    {
//        return $this->_storeManager->getStore()->getAllowedCurrencies();
//    }
//
//    public function getCurrentCurrencyRate()
//    {
//        return $this->_storeManager->getStore()->getCurrentCurrencyRate();
//    }
//
//    public function getCurrentCurrencySymbol()
//    {
//        return $this->_currency->getCurrencySymbol();
//    }
//
//    public function getCurrentCategory()
//    {
//        return $this->_registry->registry('current_category');
//    }

//    public function getCurrentProduct()
//    {
//        return $this->_registry->registry('current_product');
//    }

    public function getCustomerGroups()
    {
        $customerGroups = $this->_customerGroup->toOptionArray();
        array_unshift($customerGroups, array('value'=>'', 'label'=>'Any'));
        return $customerGroups;
    }

}